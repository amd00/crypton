
#ifndef _RANDOMGEN_H_
#define _RANDOMGEN_H_

#include "cryptographer.h"

//==========================================================================//

//! Класс генератора случайных чисел.
class RandomGen
{
private:
	uint64 cs;									//!< Контрольная сумма алгоритма.
	uint64 S;									//!< Синхропосылка (начальное заполнение алгоритма).
	uint8 rand_seq[2500];						//!< Последовательность для выработки случайных чисел.
	uint32 curr_pos;							//!< Текущая позиция в последовательности \e curr_seq.
	Cryptographer cr;							//!< Объект, реализующий криптографические преобразования.
	bool initialized;							//!< Флаг, устанавливаемый, если ПДСЧ успешно инициализирован.

public:
	RandomGen();								//!< Конструктор.
	RandomGen(const RandomGen &rg);				//!< Коструктор копирования.
	~RandomGen();								//!< Деструктор.

	void init();								//!< Инициализация.

	uint8 nextInt8();							//!< Генезация 1-байтового целого числа.
	uint32 nextInt32();							//!< Генерация 4-байтового целого числа.
	uint64 nextInt64();							//!< Генерация 8-байтового целого числа.

	RandomGen &operator=(const RandomGen &rg);	//!< Оператор присваивания.

private:
	uint64 checkSum();							//!< Проверка контрольной суммы алгоритма.
	bool isCurrentS() const;					//!< Проверка коррекности начального заполнения \e S.
	void createNewRandSequence();				//!< Создание новой последовательности \e curr_seq.
	bool isCurrentSeq() const;					//!< Проверка коррекности текущей последовательности \e curr_seq.
	bool test1() const;							//!< Проверка на частоту битов.
	bool test2() const;							//!< Проверка частоты четырёхбитовых последовательностей.
	bool test3() const;							//!< Проверка частоты битовых серий.
};

//==========================================================================//

#endif
